# build images GH actions pipeline
#
# On every PR, we want to build images and tag them appropriately.
# As the images are build, we push commits to the PR that:
#  - update the dockerfile args with the new tags
#  - save the new tags under versions/
name: buildx-images
on:
  pull_request:

jobs:
  # initial configuration
  conf:
    runs-on: ubuntu-latest
    outputs:
      dry-run: ${{ steps.configure.outputs.dry-run }}
      tag: ${{ steps.configure.outputs.tag }}
    steps:
      - uses: actions/github-script@v6
        id: dry-run-script
        name: dry-run-script
        with:
          result-encoding: string
          script: |
            res = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            for (const l of res.data) {
              if (l.name == 'gha-builds/dry-run') {
                return 'y'
              }
            }
            return 'n'
      - name: configure
        id: configure
        run: |
          echo "dry-run=${{ steps.dry-run-script.outputs.result }}" | tee -a $GITHUB_OUTPUT
          tag=$(date +%Y%m%d.%H%M%S)
          echo "tag=$tag" | tee -a $GITHUB_OUTPUT

  kernel-builder:
    needs: [conf]
    uses: ./.github/workflows/buildx-stage.yaml
    secrets: inherit
    with:
     name: kernel-builder
     build-file: dockerfiles/kernel-builder
     build-tag: quay.io/lvh-images/kernel-builder:${{ needs.conf.outputs.tag }}
     check-files: dockerfiles/kernel-builder
     base-ref: ${{ github.base_ref }}
     dry-run: ${{ needs.conf.outputs.dry-run == 'y' }}
     patch-cmd: |
         echo ${{ needs.conf.outputs.tag }} > versions/kernel-builder
         perl -pi -e 's/^ARG KERNEL_BUILDER_TAG.*$/ARG KERNEL_BUILDER_TAG=${{ needs.conf.outputs.tag }}/' dockerfiles/*

  kernel-images:
    needs: [conf, kernel-builder]
    strategy:
      matrix:
        kernel: [ "4.19", "5.4", "5.10", "5.15", "6.0", "6.3", "bpf-next" ]
    uses: ./.github/workflows/buildx-stage.yaml
    secrets: inherit
    with:
     name: kernel-image-${{ matrix.kernel }}
     build-file: dockerfiles/kernel-images
     build-tag: quay.io/lvh-images/kernel-images:${{ matrix.kernel }}-${{ needs.conf.outputs.tag }}
     build-args: |
          "KERNEL_VER=${{ matrix.kernel }}"
     check-files: '.'
     base-ref: ${{ github.base_ref }}
     dry-run: ${{ needs.conf.outputs.dry-run == 'y' }}
     apply-patch: kernel-builder.patch
     patch-cmd: |
         echo ${{ needs.conf.outputs.tag}} > versions/kernel-${{ matrix.kernel }}-image

  root-builder:
    needs: [conf]
    uses: ./.github/workflows/buildx-stage.yaml
    secrets: inherit
    with:
     name: root-builder
     check-files: dockerfiles/root-builder
     build-file: dockerfiles/root-builder
     build-tag: quay.io/lvh-images/root-builder:${{ needs.conf.outputs.tag }}
     base-ref: ${{ github.base_ref }}
     dry-run: ${{ needs.conf.outputs.dry-run == 'y' }}
     patch-cmd: |
        perl -pi -e 's/^ARG ROOT_BUILDER_TAG.*$/ARG ROOT_BUILDER_TAG=${{ needs.conf.outputs.tag }}/' dockerfiles/*
        echo ${{ needs.root-builder.outputs.tag }} > versions/root-builder

  root-images:
    needs: [conf, root-builder]
    uses: ./.github/workflows/buildx-stage.yaml
    secrets: inherit
    with:
     name: root-images
     check-files: dockerfiles/root-images _data/images.json _data/env.sh _data/bootstrap
     build-file: dockerfiles/root-images
     build-tag: quay.io/lvh-images/root-images:${{ needs.conf.outputs.tag }}
     base-ref: ${{ github.base_ref }}
     dry-run: ${{ needs.conf.outputs.dry-run == 'y' }}
     apply-patch: root-builder.patch
     patch-cmd: |
        echo ${{ needs.root-images.outputs.tag }} > versions/root-images
        perl -pi -e 's/^ARG ROOT_IMAGES_TAG.*$/ARG ROOT_IMAGES_TAG=${{ needs.conf.outputs.tag }}/' dockerfiles/*

  kind-images:
    needs: [conf, kernel-images, root-images]
    strategy:
      matrix:
        kernel: [ "4.19", "5.4", "5.10", "5.15", "6.0", "6.3", "bpf-next" ]
    uses: ./.github/workflows/buildx-stage.yaml
    secrets: inherit
    with:
     name: kind-image-${{ matrix.kernel }}
     build-file: dockerfiles/kind-images
     build-tag: quay.io/lvh-images/kind:${{ matrix.kernel }}-${{ needs.conf.outputs.tag }}
     build-args: |
          "KERNEL_VER=${{ matrix.kernel }}"
          "KERNEL_IMAGE_TAG=${{ matrix.kernel }}-${{ needs.conf.outputs.tag }}"
     check-files: '.'
     base-ref: ${{ github.base_ref }}
     dry-run: ${{ needs.conf.outputs.dry-run == 'y' }}
     apply-patch: root-images.patch
     apply-patch-2: kernel-image-${{ matrix.kernel }}.patch
     patch-cmd: |
         mkdir -p versions/kind
         echo ${{ needs.conf.outputs.tag}} > versions/kind/${{ matrix.kernel }}

  complexity-test-images:
    needs: [conf, kernel-images, root-images]
    strategy:
      matrix:
        kernel: [ "4.19", "5.4", "5.10", "5.15", "6.0", "6.3", "bpf-next" ]
    uses: ./.github/workflows/buildx-stage.yaml
    secrets: inherit
    with:
     name: complexity-test-${{ matrix.kernel }}
     build-file: dockerfiles/complexity-test-images
     build-tag: quay.io/lvh-images/complexity-test:${{ matrix.kernel }}-${{ needs.conf.outputs.tag }}
     build-args: |
          "KERNEL_VER=${{ matrix.kernel }}"
          "KERNEL_IMAGE_TAG=${{ matrix.kernel }}-${{ needs.conf.outputs.tag }}"
     check-files: '.'
     base-ref: ${{ github.base_ref }}
     dry-run: ${{ needs.conf.outputs.dry-run == 'y' }}
     apply-patch: root-images.patch
     apply-patch-2: kernel-image-${{ matrix.kernel }}.patch
     patch-cmd: |
         mkdir -p versions/complexity-test
         echo ${{ needs.conf.outputs.tag}} > versions/complexity-test/${{ matrix.kernel }}

  commit-changes:
    needs: [conf, root-images, complexity-test-images, kind-images]
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.push.outputs.sha }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: download all artifacts
        uses: actions/download-artifact@v3
        with:
           path: /tmp/artifacts
      - name: push new version
        id: push
        run: |
          git switch -c tmp
          git config user.name "GH action"
          git config user.email "ghabot@does.not.exist.cilium.org"
          find /tmp/artifacts -type f ! -size 0 | xargs git am
          git reset --soft ${{ github.event.pull_request.head.ref }}
          git status
          f=$(mktemp)
          echo "GHA: update tags" >> $f
          echo "" >> $f
          git commit -a -F $f --trailer "X-GHA-TAG: ${{ needs.generate-tag.outputs.tag }}"
          git push --force origin HEAD:${{ github.event.pull_request.head.ref }}
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" | tee -a $GITHUB_OUTPUT
      - uses: actions/github-script@v6
        env:
          SHA: ${{ steps.push.outputs.sha }}
        with:
          script: |
            const { SHA } = process.env
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `${ SHA }`,
              description: "Commit was generated",
              state: 'pending',
            })

  finalize:
    needs: [conf, commit-changes]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/github-script@v6
        if: ${{ needs.commit-changes.result == 'success' &&  needs.conf.outputs.dry-run != 'y' }}
        env:
          SHA: ${{ needs.commit-changes.outputs.sha }}
        with:
          script: |
            const { SHA } = process.env
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `${ SHA }`,
              description: "Images were generated and tags were updated",
              state: 'success',
            })
      - uses: actions/github-script@v6
        if: ${{ needs.commit-changes.result == 'success' && needs.conf.outputs.dry-run == 'y' }}
        env:
          SHA: ${{ needs.commit-changes.outputs.sha }}
        with:
          script: |
            const { SHA } = process.env
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `${ SHA }`,
              description: "Everything went OK, but this was a dry-run. Failing final check.",
              state: 'failure',
            })
      - uses: actions/github-script@v6
        if: ${{ needs.commit-changes.result != 'success' && needs.commit-changes.outputs.sha != '' }}
        env:
          SHA: ${{ needs.commit-changes.outputs.sha }}
        with:
          script: |
            const { SHA } = process.env
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `${ SHA }`,
              description: "Something went wrong and commit was not successful. Failing final check.",
              state: 'failure',
            })
