# build images GH actions pipeline
#
# On every PR, we want to build images and tag them appropriately.
# As the images are build, we push commits to the PR that:
#  - update the dockerfile args with the new tags
#  - save the new tags under versions/
name: buildx-images
on:
  pull_request:

jobs:
  conf:
    runs-on: ubuntu-latest
    outputs:
      dry-run: ${{ steps.configure.outputs.dry-run }}
    steps:
      - uses: actions/github-script@v6
        id: dry-run-script
        name: dry-run-script
        with:
          result-encoding: string
          script: |
            res = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            for (const l of res.data) {
              if (l.name == 'gha-builds/dry-run') {
                return 'y'
              }
            }
            return 'n'
      - name: configure
        id: configure
        run: |
           echo "dry-run=${{ steps.dry-run-script.outputs.result }}" | tee -a $GITHUB_OUTPUT
  # First, generate a tag. We will use this tag for everything we want to build in the context of
  # this action.
  generate-tag:
    runs-on: ubuntu-latest
    needs: conf
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      orig_ref: ${{ steps.tag.outputs.orig_ref }}
    steps:
      - name: generate tag
        id: tag
        run: |
          tag=$(date +%Y%m%d.%H%M%S)
          echo "tag=$tag" | tee -a $GITHUB_OUTPUT
          echo "orig_ref=${{ github.event.pull_request.head.sha }}" | tee -a $GITHUB_OUTPUT

  # Kernel builder will build the image for bulding kernels
  kernel-builder:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.newtag.outputs.tag }}
    timeout-minutes: 60
    needs: [conf, generate-tag]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Check if we need to build the kernel builder
        id: check
        run: |
          git diff --exit-code ${{ vars.GITHUB_BASE_REF }}..${{ github.event.pull_request.head.ref }} dockerfiles/kernel-builder
          if [ $? -eq  0 ]; then
            echo "No changes, no need to rebuild"
            echo  "build=n" | tee -a $GITHUB_OUTPUT
          else
            echo "Need to rebuild"
            echo  "build=y" | tee -a $GITHUB_OUTPUT
          fi
      - name: buildx
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/setup-buildx-action@v2
      - name: quay login
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: build and push
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          no-cache: true
          file: dockerfiles/kernel-builder
          tags: quay.io/lvh-images/kernel-builder:${{ needs.generate-tag.outputs.tag }}
      - name: set new tag
        if: ${{ steps.check.outputs.build == 'y'}}
        id: newtag
        run:
          echo "tag=${{ needs.generate-tag.outputs.tag }}" | tee -a $GITHUB_OUTPUT

  kernel-builder-update-tag:
    runs-on: ubuntu-latest
    needs: [kernel-builder, generate-tag]
    steps:
      - name: Checkout
        if: ${{ needs.kernel-builder.outputs.tag != '' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: generate patch
        if: ${{ needs.kernel-builder.outputs.tag != '' }}
        run: |
          echo ${{ needs.kernel-builder.outputs.tag }} > versions/kernel-builder
          git add --intent-to-add versions/kernel-builder
          perl -pi -e 's/^ARG KERNEL_BUILDER_TAG.*$/ARG KERNEL_BUILDER_TAG=${{ needs.kernel-builder.outputs.tag }}/' dockerfiles/*
          git diff | tee kernel-builder.patch
      - name: upload patch
        if: ${{ needs.kernel-builder.outputs.tag != '' }}
        uses: actions/upload-artifact@v3
        with:
             name: kernel-builder
             path: kernel-builder.patch

  kernel-images:
    runs-on: ubuntu-latest
    needs: [conf, generate-tag, kernel-builder-update-tag]
    timeout-minutes: 60
    outputs:
      # NB: all outputs should have the same tag, but we do this in case we ever want to change
      # things
      4-19-tag: ${{ steps.tag.outputs.k419 }}
      5-4-tag: ${{ steps.tag.outputs.k54 }}
      5-10-tag: ${{ steps.tag.outputs.k510 }}
      5-15-tag: ${{ steps.tag.outputs.k515 }}
      6-0-tag: ${{ steps.tag.outputs.k60 }}
      6-3-tag: ${{ steps.tag.outputs.k63 }}
      bpf-next-tag: ${{ steps.tag.outputs.kbpfnext }}
    strategy:
      matrix:
        kernel: [ "4.19", "5.4", "5.10", "5.15", "6.0", "6.3", "bpf-next" ]
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: buildx
      if: ${{ needs.conf.outputs.dry-run != 'y' }}
      uses: docker/setup-buildx-action@v2
    - name: quay login
      if: ${{ needs.conf.outputs.dry-run != 'y' }}
      uses: docker/login-action@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_ROBOT_TOKEN }}
    - name: build and push
      if: ${{ needs.conf.outputs.dry-run != 'y' }}
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        no-cache: true
        build-args: |
          "KERNEL_VER=${{ matrix.kernel }}"
        file: dockerfiles/kernel-images
        tags: quay.io/lvh-images/kernel-images:${{ matrix.kernel }}-${{ needs.generate-tag.outputs.tag }}
    - name: output tag
      id: tag
      run: |
        key=k$(echo ${{ matrix.kernel }} | tr -d '.-')
        echo "$key=${{ needs.generate-tag.outputs.tag }}" | tee -a $GITHUB_OUTPUT

  root-builder:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.newtag.outputs.tag }}
    timeout-minutes: 60
    # NB: we wait  on kernel-builder so that git commits do not race
    needs: [conf, generate-tag ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: check if we need to build root buidler
        id: check
        run: |
          git diff --exit-code ${{ vars.GITHUB_BASE_REF }}..${{ github.event.pull_request.head.ref }} dockerfiles/root-builder
          if [ $? -eq  0 ]; then
            echo "No changes, no need to rebuild"
            echo  "build=n" | tee -a $GITHUB_OUTPUT
          else
            echo "Need to rebuild"
            echo  "build=y" | tee -a $GITHUB_OUTPUT
          fi
      - name: buildx
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/setup-buildx-action@v2
      - name: quay login
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: build and push
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          no-cache: true
          file: dockerfiles/root-builder
          tags: quay.io/lvh-images/root-builder:${{ needs.generate-tag.outputs.tag }}
      - name: set new tag
        if: ${{ steps.check.outputs.build == 'y' }}
        id: newtag
        run: |
          echo "tag=${{ needs.generate-tag.outputs.tag }}" | tee -a $GITHUB_OUTPUT

  root-builder-update-tag:
    runs-on: ubuntu-latest
    needs: [root-builder, kernel-builder-update-tag, generate-tag]
    steps:
      - name: Checkout
        if: ${{ needs.root-builder.outputs.tag != '' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: commit tag
        if: ${{ needs.root-builder.outputs.tag != '' }}
        run: |
          echo ${{ needs.root-builder.outputs.tag }} > versions/root-builder
          git add --intent-to-add versions/root-builder
          perl -pi -e 's/^ARG ROOT_BUILDER_TAG.*$/ARG ROOT_BUILDER_TAG=${{ needs.root-builder.outputs.tag }}/' dockerfiles/*
          git diff | tee root-builder.patch
      - name: upload patch
        if: ${{ needs.root-builder.outputs.tag != '' }}
        uses: actions/upload-artifact@v3
        with:
             name: root-builder
             path: root-builder.patch

  root-images:
    needs: [conf, generate-tag, root-builder-update-tag]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      tag: ${{ steps.newtag.outputs.tag }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      # NB: this could be used to conditionally build the image
      - name: Check if we need to build the kernel builder
        id: check
        run: |
          git diff --exit-code ${{ vars.GITHUB_BASE_REF }}..${{ github.event.pull_request.head.ref }} dockerfiles/root-images _data/images.json _data/env.sh _data/bootstrap
          if [ $? -eq  0 ]; then
            echo "No changes, no need to rebuild"
            echo  "build=n" | tee -a $GITHUB_OUTPUT
          else
            echo "Need to rebuild"
            echo  "build=y" | tee -a $GITHUB_OUTPUT
          fi
      - name: buildx
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/setup-buildx-action@v2
      - name: quay login
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: build and push
        if: ${{ steps.check.outputs.build == 'y' && needs.conf.outputs.dry-run != 'y' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          no-cache: true
          allow: |
            security.insecure
          file: dockerfiles/root-images
          tags: quay.io/lvh-images/root-images:${{ needs.generate-tag.outputs.tag }}
      - name: set new tag
        if: ${{ always() && !failure() && steps.check.outputs.build == 'y'}}
        id: newtag
        run:
          echo "tag=${{ needs.generate-tag.outputs.tag }}" | tee -a $GITHUB_OUTPUT

  root-images-update-tag:
    runs-on: ubuntu-latest
    needs: [root-images, root-builder-update-tag, generate-tag]
    steps:
      - name: Checkout
        if: ${{ needs.root-images.outputs.tag != '' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: generate patch
        if: ${{ needs.root-images.outputs.tag != '' }}
        run: |
          echo ${{ needs.root-images.outputs.tag }} > versions/root-images
          git add --intent-to-add versions/root-images
          perl -pi -e 's/^ARG ROOT_IMAGES_TAG.*$/ARG ROOT_IMAGES_TAG=${{ needs.root-images.outputs.tag }}/' dockerfiles/*
          git diff | tee root-images.patch
      - name: upload patch
        if: ${{ needs.root-images.outputs.tag != '' }}
        uses: actions/upload-artifact@v3
        with:
             name: root-images
             path: root-images.patch

  kernel-update-tags:
    needs: [kernel-images, root-images-update-tag, generate-tag]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: commit tags
        env:
          TAGS: ${{ toJSON(needs.kernel-images.outputs) }}
        run: |
          truncate -s 0 versions/kernel-images
          for k in "4.19" "5.4" "5.10" "5.15" "6.0" "6.3" "bpf-next"
          do
              key="$(echo $k | tr '.' '-')-tag"
              tag=$(echo $TAGS | jq --raw-output ".\"$key\"")
              echo $k-$tag >> versions/kernel-images
          done
          git add --intent-to-add versions/kernel-images
          git diff | tee kernel-images.patch
      - name: upload patch
        if: ${{ needs.kernel-builder.outputs.tag != '' }}
        uses: actions/upload-artifact@v3
        with:
             name: kernel-images
             path: kernel-images.patch


  kind-images:
    needs: [ conf, generate-tag, kernel-update-tags, root-images-update-tag ]
    strategy:
      matrix:
        kernel: [ "4.19", "5.4", "5.10", "5.15", "6.0", "6.3", "bpf-next" ]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      # NB: all outputs should have the same tag, but we do this in case we ever want to change
      # things
      4-19-tag: ${{ steps.tag.outputs.k419 }}
      5-4-tag: ${{ steps.tag.outputs.k54 }}
      5-10-tag: ${{ steps.tag.outputs.k510 }}
      5-15-tag: ${{ steps.tag.outputs.k515 }}
      6-0-tag: ${{ steps.tag.outputs.k60 }}
      6-3-tag: ${{ steps.tag.outputs.k63 }}
      bpf-next-tag: ${{ steps.tag.outputs.kbpfnext }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: buildx
        if: ${{ needs.conf.outputs.dry-run != 'y' }}
        uses: docker/setup-buildx-action@v2
      - name: quay login
        if: ${{ needs.conf.outputs.dry-run != 'y' }}
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: kernel image tags
        id: kimg
        run: |
          tag=$(grep -- ^${{ matrix.kernel }} <versions/kernel-images)
          echo "tag=$tag" | tee -a $GITHUB_OUTPUT
      - name: build and push
        if: ${{ needs.conf.outputs.dry-run != 'y' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          no-cache: true
          allow: |
            security.insecure
          build-args: |
            "KERNEL_IMAGE_TAG=${{ steps.kimg.outputs.tag }}"
            "KERNEL_VER=${{ matrix.kernel }}"
          file: dockerfiles/kind-images
          tags: quay.io/lvh-images/kind:${{ matrix.kernel }}-${{ needs.generate-tag.outputs.tag }}
      - name: output tag
        id: tag
        run: |
          key=k$(echo ${{ matrix.kernel }} | tr -d '.-')
          echo "$key=${{ needs.generate-tag.outputs.tag }}" | tee -a $GITHUB_OUTPUT

  kind-update-tags:
    needs: [kind-images, generate-tag]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: commit tags
        env:
          TAGS: ${{ toJSON(needs.kind-images.outputs) }}
        run: |
          truncate -s 0 versions/kind
          for k in "4.19" "5.4" "5.10" "5.15" "6.0" "6.3" "bpf-next"
          do
              key="$(echo $k | tr '.' '-')-tag"
              tag=$(echo $TAGS | jq --raw-output ".\"$key\"")
              echo $k-$tag >> versions/kind
          done
          git add --intent-to-add versions/kind
          git diff | tee kind-images.patch
      - name: upload patch
        uses: actions/upload-artifact@v3
        with:
             name: kind-images
             path: kind-images.patch

  complexity-test-images:
    needs: [ conf, generate-tag, kernel-update-tags, root-images-update-tag ]
    strategy:
      matrix:
        kernel: [ "4.19", "5.4", "5.10", "5.15", "6.0", "6.3", "bpf-next" ]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      # NB: all outputs should have the same tag, but we do this in case we ever want to change
      # things
      4-19-tag: ${{ steps.tag.outputs.k419 }}
      5-4-tag: ${{ steps.tag.outputs.k54 }}
      5-10-tag: ${{ steps.tag.outputs.k510 }}
      5-15-tag: ${{ steps.tag.outputs.k515 }}
      6-0-tag: ${{ steps.tag.outputs.k60 }}
      6-3-tag: ${{ steps.tag.outputs.k63 }}
      bpf-next-tag: ${{ steps.tag.outputs.kbpfnext }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: buildx
        if: ${{ needs.conf.outputs.dry-run != 'y' }}
        uses: docker/setup-buildx-action@v2
      - name: quay login
        if: ${{ needs.conf.outputs.dry-run != 'y' }}
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: kernel image tags
        id: kimg
        run: |
          tag=$(grep -- ^${{ matrix.kernel }} <versions/kernel-images)
          echo "tag=$tag" | tee -a $GITHUB_OUTPUT
      - name: build and push
        if: ${{ needs.conf.outputs.dry-run != 'y' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          no-cache: true
          allow: |
            security.insecure
          build-args: |
            "KERNEL_IMAGE_TAG=${{ steps.kimg.outputs.tag }}"
            "KERNEL_VER=${{ matrix.kernel }}"
          file: dockerfiles/complexity-test-images
          tags: quay.io/lvh-images/complexity-test:${{ matrix.kernel }}-${{ needs.generate-tag.outputs.tag }}
      - name: output tag
        id: tag
        run: |
          key=k$(echo ${{ matrix.kernel }} | tr -d '.-')
          echo "$key=${{ needs.generate-tag.outputs.tag }}" | tee -a $GITHUB_OUTPUT

  complexity-test-update-tags:
    needs: [complexity-test-images, generate-tag, kind-update-tags]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: commit tags
        env:
          TAGS: ${{ toJSON(needs.complexity-test-images.outputs) }}
        run: |
          truncate -s 0 versions/complexity-test
          for k in "4.19" "5.4" "5.10" "5.15" "6.0" "6.3" "bpf-next"
          do
              key="$(echo $k | tr '.' '-')-tag"
              tag=$(echo $TAGS | jq --raw-output ".\"$key\"")
              echo $k-$tag >> versions/complexity-test
          done
          git add --intent-to-add versions/complexity-test
          git diff | tee complexity-test-images.patch
      - name: upload patch
        uses: actions/upload-artifact@v3
        with:
             name: complexity-test-images
             path: complexity-test-images.patch

  rebase:
    needs: [kind-update-tags, complexity-test-update-tags, generate-tag]
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.rebase.outputs.sha }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: prepare git
        run: |
          git config user.name "GH action"
          git config user.email "ghabot@does.not.exist.cilium.org"

      - name: download patches
        uses: actions/download-artifact@v3
        with:
           path: /tmp/artifacts

      - name: apply patches
        run: |
        find /tmp/artifacts -name \*.patch | xargs git-apply --index
        git diff --cached

      - name: rebase
        id: rebase
        run: |
          #git reset --soft ${{ needs.generate-tag.outputs.orig_ref }}
          #git status
          f=$(mktemp)
          echo "GHA: update tags" >> $f
          echo "" >> $f
          echo "info:" >> $f
          cat << EOF >> $f
          ${{ toJSON(needs.generate-tag.outputs) }}
          EOF
          git commit -F $f --trailer "X-GHA-TAG: ${{ needs.generate-tag.outputs.tag }}"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" | tee -a $GITHUB_OUTPUT

  finalize:
    needs: [conf, rebase]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/github-script@v6
        if: ${{ needs.rebase.result == 'success' &&  needs.conf.outputs.dry-run != 'y' }}
        env:
          SHA: ${{ needs.rebase.outputs.sha }}
        with:
          script: |
            const { SHA } = process.env
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `${ SHA }`,
              description: "Images were generated and tags were updated",
              state: 'success',
            })
      - uses: actions/github-script@v6
        if: ${{ needs.rebase.result == 'success' &&  needs.conf.outputs.dry-run == 'y' }}
        env:
          SHA: ${{ needs.rebase.outputs.sha }}
        with:
          script: |
            const { SHA } = process.env
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `${ SHA }`,
              description: "Everything went OK, but this was a dry-run. Failing final check.",
              state: 'failure',
            })
      - uses: actions/github-script@v6
        if: ${{ needs.rebase.result != 'success' }}
        env:
          SHA: ${{ needs.rebase.outputs.sha }}
        with:
          script: |
            const { SHA } = process.env
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: `${ SHA }`,
              description: "Something went wrong and rebase was not successful. Failing final check.",
              state: 'failure',
            })
