name: buildx-step
on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      build-file:
        required: true
        type: string
      build-tag:
        required: true
        type: string
      check-files:
        required: true
        type: string
      base-ref:
        required: true
        type: string
      build-args:
        default: ''
        type: string
      dry-run:
        default: false
        type: boolean
      patch-cmd:
        type: string
      apply-patch:
        type: string
      apply-patch-2:
        type: string
      platforms:
        type: string
        required: false
      runner:
        type: string
        required: false
        default: 'oracle-vm-16cpu-64gb-x86-64'
jobs:
  build:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: init git repo
        run: |
          git config user.name "GH action"
          git config user.email "ghabot@does.not.exist.cilium.org"

      - name: Check if files were modified
        id: check
        run: |
         git fetch origin
         set +e
         git diff --quiet --exit-code origin/${{ inputs.base-ref }}..origin/${{ github.event.pull_request.head.ref }} ${{ inputs.check-files }}
         if [ $? -eq  0 ]; then
           echo "No changes, no need to rebuild"
           echo  "build=n" | tee -a $GITHUB_OUTPUT
         else
           echo "Need to rebuild"
           echo  "build=y" | tee -a $GITHUB_OUTPUT
         fi
         set -e

      - name: download first patch
        if: ${{ steps.check.outputs.build == 'y' && inputs.apply-patch != '' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
           name: ${{ inputs.apply-patch }}
           path: /tmp/
      - name: apply first patch
        if: ${{ steps.check.outputs.build == 'y' && inputs.apply-patch != '' }}
        run: |
          if [ $(wc -l < /tmp/${{ inputs.apply-patch }} ) -gt 0 ]; then
            cat /tmp/${{ inputs.apply-patch }}
            git am /tmp/${{ inputs.apply-patch }}
            git log --oneline -n 2
          fi

      - name: download second patch
        if: ${{ steps.check.outputs.build == 'y' && inputs.apply-patch-2 != '' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
           name: ${{ inputs.apply-patch-2 }}
           path: /tmp/
      - name: apply second patch
        if: ${{ steps.check.outputs.build == 'y' && inputs.apply-patch-2 != '' }}
        run: |
          if [ $(wc -l < /tmp/${{ inputs.apply-patch-2 }} ) -gt 0 ]; then
            cat /tmp/${{ inputs.apply-patch-2 }}
            git am /tmp/${{ inputs.apply-patch-2 }}
            git log --oneline -n 2
          fi

      - name: evaluate build args
        id: buildargs
        run: |
          {
            echo 'value<<EOF'
            echo -n "${{ inputs.build-args }}"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: setup buildx
        if: ${{ steps.check.outputs.build == 'y' && !inputs.dry-run }}
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: quay login
        if: ${{ steps.check.outputs.build == 'y' && !inputs.dry-run }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: build and push
        if: ${{ steps.check.outputs.build == 'y' && !inputs.dry-run }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          no-cache: true
          file: ${{ inputs.build-file }}
          tags: ${{ inputs.build-tag }}
          build-args: ${{ steps.buildargs.outputs.value }}
          platforms: ${{ inputs.platforms }}
      - name: run commands and generate patches
        if: ${{ steps.check.outputs.build == 'y' && inputs.patch-cmd != '' }}
        run: |
            old=$(git rev-parse --abbrev-ref HEAD)
            git switch -c tmp-${{ inputs.name }}
            ${{ inputs.patch-cmd }}
            git add .
            git commit --all -m "TEMP: ${{ inputs.name }}"
            git format-patch -1 --stdout | tee ${{ inputs.name }}.patch
            git switch $old

      - name: generate empty patch
        if: ${{ steps.check.outputs.build != 'y' && inputs.patch-cmd != '' }}
        run: |
            truncate -s 0 ${{ inputs.name }}.patch

      - name: upload patch
        if: ${{ inputs.patch-cmd != '' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ inputs.name }}.patch
          path: ${{ inputs.name }}.patch
